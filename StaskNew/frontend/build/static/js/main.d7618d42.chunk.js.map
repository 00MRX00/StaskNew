{"version":3,"sources":["components/Header/Header.js","hoc/Layout/Layout.js","components/Home/Home.js","components/UI/Input/Input.js","components/UI/Button/Button.js","axios/axios-stask.js","store/actions/project.js","store/actions/actionTypes.js","store/actions/auth.js","components/Auth/Auth.js","components/Registration/Registration.js","components/Logout/Logout.js","components/UI/Select/Select.js","components/UserType/UserType.js","components/CreateProject/CreateProject.js","components/UserProjects/UserProjects.js","store/actions/task.js","components/CreateTask/CreateTask.js","components/UserTasks/UserTasks.js","components/Project/Project.js","store/actions/todo.js","components/ToDoList/ToDoList.js","components/Task/Task.js","App.js","serviceWorker.js","store/reducers/auth.js","store/reducers/project.js","store/reducers/task.js","store/reducers/todo.js","store/reducers/rootReducer.js","index.js","components/Auth/Auth.css","components/UI/Input/Input.css","components/UI/Button/Button.css","components/Registration/Registration.css","components/CreateProject/CreateProject.css","components/UserType/UserType.css","components/UserProjects/UserProjects.css","components/CreateTask/CreateTask.css","hoc/Layout/Layout.css","components/Header/Header.css","components/Home/Home.css","components/UI/Select/Select.css","components/Project/Project.css","components/UserTasks/UserTasks.css","components/Task/Task.css","App.css"],"names":["connect","state","isAuthenticated","authReducer","token","dispatch","props","className","classes","Header","id","to","Fragment","Layout","this","children","React","Component","Home","withRouter","isInvalid","valid","touched","shouldValidate","Input","inputType","type","cls","htmlFor","Math","random","push","invalid","join","label","value","onChange","min","checked","errorMessage","Buttons","Button","onClick","disabled","axios","create","baseURL","projectError","logout","a","localStorage","removeItem","authSuccess","user","Auth","isFormValid","formControls","email","password","loginHandler","auth","submitHandler","event","preventDefault","onChangeHandler","controlName","control","target","setState","Object","keys","map","index","key","validation","onSubmit","AuthForm","renderInputs","requestData","options","method","headers","data","JSON","stringify","url","then","response","setItem","catch","error","Registration","required","maxLength","username","minLength","first_name","last_name","patronymic","registerHandler","forEach","name","validateControl","fields","registration","isValid","trim","test","String","toLocaleLowerCase","length","RegistrationForm","Logout","deleteToken","getItem","Select","types","i","UserType","onChangeUsersInputHandler","SelectGroup","style","margin","paddingBottom","width","onChangeUsersSelectHandler","CreateProject","title","theme","description","numUsers","usersInputSelect","createProjectHandler","userInputSelect","isUserInputSelect","Array","createProject","history","users","slice","addUser","us","remUser","pop","fetchProjectUserTypes","projectUserTypes","projectUserType","CreateProjectForm","projectReducer","UserProjects","onProjectClickHandler","projectId","setCurrentProject","fetchProjects","projects","project","card","cardBody","renderProjects","taskError","getDateTimeForInput","date","getFullYear","getMonth","getDate","getHours","getMinutes","CreateTask","start_date","Date","startDate","end_date","endDate","is_public","taskUsers","createTasktHandler","currentProject","createTask","undefined","onSelectChangeHandler","option","animatedComponents","makeAnimated","projectUsers","CreateTaskForm","fontWeight","closeMenuOnSelect","components","defaultValue","isMulti","UserTasks","fetchTasks","tasks","task","setCurrentTask","renderTasks","taskReducer","prId","taskId","Project","fetchProjectUsers","location","pathname","match","display","clearCurrentProject","todoError","ToDoList","handleToggle","currentIndex","indexOf","newChecked","splice","fetchTodos","currentTask","List","todos","todo","labelId","ListItem","role","dense","button","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","color","ListItemText","primary","text","todoReducer","tsId","setCurrentTodo","todoId","Task","ptExist","clearCurrentTask","App","autoLogin","routers","path","component","exact","Boolean","window","hostname","initialState","currentTodo","combineReducers","action","curProject","curTask","curTodo","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistConfig","storage","persistedReducer","persistReducer","rootReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","unregister","console","message","module","exports"],"mappings":"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","file":"static/js/main.d7618d42.chunk.js","sourcesContent":["import React from 'react'\r\nimport classes from './Header.css'\r\nimport { connect } from 'react-redux'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst Header = props => {\r\n    return (\r\n        <nav className={classes.Header + \" navbar navbar-expand-lg navbar-dark bg-dark \"}>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"navbar-item\">\r\n                        <NavLink className=\"navbar-brand\" to={\"/\"}>$TA$K</NavLink>\r\n                    </li>\r\n                </ul>\r\n                <ul className=\"navbar-nav my-2 my-lg-0\">\r\n                    {\r\n                        !props.isAuthenticated\r\n                            ? <React.Fragment>\r\n                                <li className=\"nav-item\">\r\n                                    <NavLink className=\"nav-link\" to={\"/auth\"}>Авторизация</NavLink>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <NavLink className=\"nav-link\" to={\"/registration\"}>Регистрация</NavLink>\r\n                                </li>\r\n                            </React.Fragment>\r\n                            : <React.Fragment>\r\n                                <li className=\"nav-item\">\r\n                                    <NavLink className=\"nav-link\" to={\"/create_project\"}>Создать проект</NavLink>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <NavLink className=\"nav-link\" to={\"/user_projects\"}>Список проектов</NavLink>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <NavLink className=\"nav-link\" to={\"/logout\"}>Выйти</NavLink>\r\n                                </li>\r\n                            </React.Fragment>\r\n                    }\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isAuthenticated: !!state.authReducer.token\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React from 'react';\r\nimport classes from './Layout.css';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../../components/Header/Header';\r\n\r\nclass Layout extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.Layout}>\r\n                <Header />\r\n\r\n                <main>\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        \r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Layout);","import React, { Component } from 'react'\r\nimport classes from './Home.css'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.Home}>\r\n                <h1>This is Home page!</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\t\r\n\t};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n\t\t\r\n\t};\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Home));","import React from 'react';\r\nimport classes from './Input.css';\r\n\r\nfunction isInvalid({valid, touched, shouldValidate}) {\r\n    return !valid && shouldValidate && touched\r\n}\r\n\r\nconst Input = props => {\r\n    const inputType = props.type || \"text\";\r\n    const cls = [classes.Input];\r\n    const htmlFor = `${inputType}-${Math.random()}`;\r\n\r\n    if (isInvalid(props)) {\r\n        cls.push(classes.invalid)\r\n    }\r\n    \r\n    return (\r\n        <div className={cls.join(' ')}>\r\n            <label htmlFor={htmlFor}>{props.label}</label>\r\n            <input\r\n                type={props.type}\r\n                id={htmlFor}\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n                min={props.min}\r\n                checked={props.checked}\r\n                className={props.className}\r\n            />\r\n\r\n            {\r\n                isInvalid(props)\r\n                ? <span>{props.errorMessage || \"Введите верные значения\"}</span>\r\n                : null\r\n            }\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Input;","import React from 'react';\r\nimport classes from './Button.css';\r\n\r\nconst Buttons = props => {\r\n    const cls = [\r\n        classes.Button,\r\n        classes[props.type]\r\n    ]\r\n    \r\n    return (\r\n        <button \r\n            onClick={props.onClick}\r\n            className={cls.join(' ')}\r\n            disabled={props.disabled}\r\n        >\r\n            {props.children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Buttons;","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n    baseURL: \"http://127.0.0.1:8000/api\",\r\n})","import axios from '../../axios/axios-stask'\r\nimport {PROJECT_ERROR, USER_PROJECTS_LIST, CLEAR_USER_PROJECTS, CURRENT_PROJECT, CLEAR_CURRENT_PROJECT, PROJECTS_USERS_LIST, PROJECT_USER_TYPES_LIST } from './actionTypes'\r\n\r\nexport function createProject(formControls) {\r\n    return async dispatch => {\r\n        let url = \"create_project\"\r\n        const token = localStorage.getItem(\"token\")\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Token ' + token,\r\n            },\r\n            data: JSON.stringify(formControls),\r\n            url: url\r\n        };\r\n        await axios(options)\r\n            .catch(error => {\r\n                dispatch(projectError(\"Ошибка создания проекта\"));\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchProjects() {\r\n    return async dispatch => {\r\n        let url = \"user_projects\"\r\n        const token = localStorage.getItem(\"token\")\r\n        const options = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Token ' + token,\r\n            },\r\n            url: url\r\n        };\r\n        await axios(options)\r\n            .then(response => {\r\n                dispatch(userProjectsList(response.data.projects))\r\n            })\r\n            .catch(error => {\r\n                dispatch(projectError(\"Ошибка получения списка проектов\"));\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchProjectUsers(projectId) {\r\n    return async dispatch => {\r\n        const prId = {\r\n            id: projectId,\r\n        }\r\n        let url = \"project_users\"\r\n        const token = localStorage.getItem(\"token\")\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Token ' + token,\r\n            },\r\n            data: JSON.stringify(prId),\r\n            url: url\r\n        };\r\n        \r\n        await axios(options)\r\n            .then(response => {\r\n                dispatch(userProjectUsersList(response.data.users))\r\n            })\r\n            .catch(error => {\r\n                dispatch(projectError(\"Ошибка получения списка пользователей\"));\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchProjectUserTypes() {\r\n    return async dispatch => {\r\n        let url = \"projectuserstypes/\"\r\n        const token = localStorage.getItem(\"token\")\r\n        const options = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Token ' + token,\r\n            },\r\n            url: url\r\n        };\r\n        \r\n        await axios(options)\r\n            .then(response => {\r\n                dispatch(projectUserTypesList(response.data))\r\n            })\r\n            .catch((error) => {\r\n                dispatch(projectError(\"Ошибка получения списка типов\"));\r\n            })\r\n    }\r\n}\r\n\r\nexport function projectUserTypesList(projectUserTypes) {\r\n    return {\r\n        type: PROJECT_USER_TYPES_LIST,\r\n        projectUserTypes: projectUserTypes\r\n    }\r\n}\r\n\r\nexport function setCurrentProject(projectId) {\r\n    return {\r\n        type: CURRENT_PROJECT,\r\n        projectId: projectId\r\n    }\r\n}\r\n\r\nexport function clearCurrentProject() {\r\n    return {\r\n        type: CLEAR_CURRENT_PROJECT,\r\n    }\r\n}\r\n\r\nexport function userProjectsList(projects) {\r\n    return {\r\n        type: USER_PROJECTS_LIST,\r\n        projects: projects\r\n    }\r\n}\r\n\r\nexport function userProjectUsersList(projectUsers) {\r\n    return {\r\n        type: PROJECTS_USERS_LIST,\r\n        projectUsers: projectUsers\r\n    }\r\n}\r\n\r\nexport function projectError(errorMessage) {\r\n    return {\r\n        type: PROJECT_ERROR,\r\n        errorMessage: errorMessage\r\n    }\r\n}\r\n\r\nexport function clearUserProjects() {\r\n    return {\r\n        type: CLEAR_USER_PROJECTS,\r\n    }\r\n}","export const AUTH_SUCCESS = 'AUTH_SUCCESS';\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\n\r\nexport const REGISTRATION_SUCCESS = 'REGISTRATION_SUCCESS';\r\nexport const REGISTRATION_ERROR = 'REGISTRATION_ERROR';\r\n\r\nexport const PROJECT_ERROR = 'PROJECT_ERROR';\r\nexport const USER_PROJECTS_LIST = 'USER_PROJECTS_LIST';\r\nexport const CLEAR_USER_PROJECTS = 'CLEAR_USER_PROJECTS';\r\nexport const CURRENT_PROJECT = 'CURRENT_PROJECT';\r\nexport const CLEAR_CURRENT_PROJECT = 'CLEAR_CURRENT_PROJECT';\r\nexport const PROJECTS_USERS_LIST = 'PROJECTS_USERS_LIST';\r\nexport const PROJECT_USER_TYPES_LIST = 'PROJECT_USER_TYPES_LIST';\r\n\r\nexport const TASK_ERROR = 'TASK_ERROR';\r\nexport const PROJECT_TASKS_LIST = 'PROJECT_TASKS_LIST';\r\nexport const CLEAR_PROJECT_TASKS = 'CLEAR_PROJECT_TASKS';\r\nexport const CURRENT_TASK = 'CURRENT_TASK';\r\nexport const CLEAR_CURRENT_TASK = 'CLEAR_CURRENT_TASK';\r\n\r\nexport const TODO_ERROR = 'TODO_ERROR';\r\nexport const TASK_TODOS_LIST = 'TASK_TODOS_LIST';\r\nexport const CLEAR_TASK_TODOS = 'CLEAR_TASK_TODOS';\r\nexport const CURRENT_TODO = 'CURRENT_TODO';\r\nexport const CLEAR_CURRENT_TODO = 'CLEAR_CURRENT_TODO';","import axios from '../../axios/axios-stask'\r\nimport { AUTH_SUCCESS, AUTH_LOGOUT, AUTH_ERROR, REGISTRATION_ERROR } from './actionTypes'\r\nimport { clearUserProjects } from './project'\r\n\r\nexport function auth(email, password) {\r\n    return async dispatch => {\r\n        const requestData = {\r\n            email: email,\r\n            password: password,\r\n        }\r\n\r\n        let url = \"auth/login\"\r\n\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: JSON.stringify(requestData),\r\n            url: url\r\n        };\r\n\r\n        await axios(options)\r\n            .then(response => {\r\n                localStorage.setItem('token', response.data.token);\r\n                dispatch(authSuccess(response.data.user, response.data.token));\r\n            })\r\n            .catch(error => {\r\n                dispatch(authError());\r\n            })\r\n    };\r\n}\r\n\r\nexport function deleteToken() {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token')\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': 'Token ' + token,\r\n            },\r\n            url: \"auth/logout\"\r\n        };\r\n\r\n        axios(options)\r\n            .then(() => {\r\n                dispatch(logout())\r\n            })\r\n    };\r\n}\r\n\r\nexport function allLogout() {\r\n    return {\r\n        type: AUTH_LOGOUT\r\n    };\r\n}\r\n\r\nexport function logout() {\r\n    return async dispatch => {\r\n        localStorage.removeItem('token')\r\n        dispatch(clearUserProjects())\r\n        dispatch(allLogout())\r\n    }\r\n}\r\n\r\nexport function authSuccess(user, token) {\r\n    return {\r\n        type: AUTH_SUCCESS,\r\n        user,\r\n        token\r\n    };\r\n}\r\n\r\nexport function authError() {\r\n    return {\r\n        type: AUTH_ERROR,\r\n        errorMessage: \"Неправильный логин или пароль\"\r\n    };\r\n}\r\n\r\nexport function autoLogin() {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            const options = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': 'Token ' + token,\r\n                },\r\n                url: \"auth/user\"\r\n            };\r\n\r\n            axios(options)\r\n                .then((response) => {\r\n                    dispatch(authSuccess(response.data, token))\r\n                })\r\n                .catch(error => {\r\n                    dispatch(logout())\r\n                })\r\n\r\n        } else {\r\n            dispatch(logout())\r\n        }\r\n\r\n    };\r\n}\r\n\r\nexport function registration(formControls) {\r\n    return async dispatch => {\r\n        let url = \"auth/register\"\r\n\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: JSON.stringify(formControls),\r\n            url: url\r\n        };\r\n        await axios(options)\r\n            .catch(error => {\r\n                dispatch(registrationError());\r\n            })\r\n    };\r\n}\r\n\r\nexport function registrationError() {\r\n    return {\r\n        type: REGISTRATION_ERROR,\r\n        errorMessage: \"Ошибка регистрации\"\r\n    };\r\n}","import React from 'react'\r\nimport classes from './Auth.css'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport { connect } from 'react-redux'\r\nimport { auth } from '../../store/actions/auth'\r\n\r\nclass Auth extends React.Component {\r\n    state = {\r\n        isFormValid: false,\r\n        formControls: {\r\n            email: {\r\n                value: '',\r\n                type: 'email',\r\n                label: 'Email',\r\n                errorMessage: 'Введте корректный email',\r\n                valid: false\r\n            },\r\n            password: {\r\n                value: '',\r\n                type: 'password',\r\n                label: 'Пароль',\r\n                errorMessage: 'Введте корректный пароль',\r\n                valid: false\r\n            }\r\n        }\r\n    }\r\n\r\n    loginHandler = () => {\r\n        this.props.auth(\r\n            this.state.formControls.email.value,\r\n            this.state.formControls.password.value,\r\n        );\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onChangeHandler = (event, controlName) => {\r\n        const { formControls } = this.state\r\n        const control = { ...formControls[controlName] }\r\n\r\n        control.value = event.target.value;\r\n\r\n        formControls[controlName] = control;\r\n\r\n        this.setState({\r\n            formControls,\r\n        })\r\n    }\r\n\r\n    renderInputs() {\r\n        return Object.keys(this.state.formControls).map((controlName, index) => {\r\n            const control = this.state.formControls[controlName];\r\n            return (\r\n                <Input\r\n                    key={controlName + index}\r\n                    type={control.type}\r\n                    value={control.value}\r\n                    valid={control.valid}\r\n                    label={control.label}\r\n                    shouldValidate={!!control.validation}\r\n                    errorMessage={control.errorMessage}\r\n                    onChange={(event) => this.onChangeHandler(event, controlName)}\r\n                />\r\n            );\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Auth}>\r\n                <div>\r\n                <h1>Авторизация</h1>\r\n                    <form onSubmit={this.submitHandler} className={classes.AuthForm}>\r\n\r\n                        {this.renderInputs()}\r\n                        <Button\r\n                            type=\"success\"\r\n                            onClick={this.loginHandler}\r\n                        >Войти</Button>\r\n\r\n                    </form>\r\n                    {/* TODO: Вывести алерт об ошибке авторизации / об успешной авторизации */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        auth: (email, password) => dispatch(auth(email, password))\r\n    };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Auth);","import React from 'react'\r\nimport classes from './Registration.css'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport { connect } from 'react-redux'\r\n\r\nimport {registration} from '../../store/actions/auth'\r\n\r\nconst vaidateEmail = email => {\r\n    const re = /[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+/gm;\r\n    return re.test(String(email).toLocaleLowerCase());\r\n}\r\n\r\nclass Registration extends React.Component {\r\n    state = {\r\n        isFormValid: false,\r\n        touched: false,\r\n        formControls: {\r\n            email: {\r\n                value: '',\r\n                type: 'email',\r\n                label: 'Email',\r\n                errorMessage: 'Введте корректный email',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    email: true,\r\n                    maxLength: 100\r\n                }\r\n            },\r\n            username: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Никнейм',\r\n                errorMessage: 'Введте корректный никнейм',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    maxLength: 30,\r\n                    minLength: 3\r\n                }\r\n            },\r\n            first_name: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Имя',\r\n                errorMessage: 'Введте корректное имя',\r\n                valid: false,\r\n                validation: {\r\n                    maxLength: 50\r\n                }\r\n            },\r\n            last_name: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Фамилия',\r\n                errorMessage: 'Введте корректную фамилию',\r\n                valid: false,\r\n                validation: {\r\n                    maxLength: 50\r\n                }\r\n            },\r\n            patronymic: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Отчество',\r\n                errorMessage: 'Введте корректное отчество',\r\n                valid: false,\r\n                validation: {\r\n                    maxLength: 50\r\n                }\r\n            },\r\n            password: {\r\n                value: '',\r\n                type: 'password',\r\n                label: 'Пароль',\r\n                errorMessage: 'Введте корректный пароль',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    registerHandler = () => {\r\n        const formControls = { ...this.state.formControls }\r\n\r\n        let isFormValid = true\r\n\r\n        Object.keys(formControls).forEach(name => {\r\n            formControls[name].valid = this.validateControl(formControls[name].value, formControls[name].validation)\r\n            isFormValid = formControls[name].valid && isFormValid\r\n        });\r\n\r\n        this.setState({\r\n            isFormValid,\r\n            touched: true\r\n        })\r\n\r\n        const fields = {}\r\n\r\n        Object.keys(formControls).forEach(name => {\r\n            fields[name] = formControls[name].value\r\n        })\r\n        \r\n        if (isFormValid) {\r\n            this.props.registration(fields);\r\n        } else {\r\n            // TODO: Алерт об ошибке валидации\r\n        }\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onChangeHandler = (event, controlName) => {\r\n        const { formControls } = this.state\r\n        const control = { ...formControls[controlName] }\r\n\r\n        control.value = event.target.value;\r\n\r\n        formControls[controlName] = control;\r\n\r\n        this.setState({\r\n            formControls,\r\n        })\r\n    }\r\n\r\n    validateControl(value, validation) {\r\n        if (!validation) {\r\n            return true;\r\n        }\r\n        let isValid = true;\r\n\r\n        if (validation.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (validation.email) {\r\n            isValid = vaidateEmail(value) && isValid;\r\n        }\r\n\r\n        if (validation.minLength) {\r\n            isValid = value.length >= validation.minLength && isValid;\r\n        }\r\n        \r\n        if (validation.maxLength) {\r\n            isValid = value.length <= validation.maxLength && isValid;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    renderInputs() {\r\n        return Object.keys(this.state.formControls).map((controlName, index) => {\r\n            const control = this.state.formControls[controlName];\r\n            return (\r\n                <Input\r\n                    key={controlName + index}\r\n                    type={control.type}\r\n                    value={control.value}\r\n                    valid={control.valid}\r\n                    label={control.label}\r\n                    shouldValidate={!!control.validation}\r\n                    touched={this.state.touched}\r\n                    errorMessage={control.errorMessage}\r\n                    onChange={(event) => this.onChangeHandler(event, controlName)}\r\n                />\r\n            );\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Registration}>\r\n                <div>\r\n                    <h1>Регистрация</h1>\r\n                    <form onSubmit={this.submitHandler} className={classes.RegistrationForm}>\r\n\r\n                        {this.renderInputs()}\r\n\r\n                        <Button\r\n                            type=\"success\"\r\n                            onClick={this.registerHandler}\r\n                        >\r\n                            Зарегистрироватсья\r\n                        </Button>\r\n                    </form>\r\n                    {/* TODO: Вывести алерт об ошибке регистрации или о ошибке валидации полей / об успешной регистрации */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        registration: (formControls) => dispatch(registration(formControls))\r\n    };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Registration);","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { deleteToken } from '../../store/actions/auth';\r\n\r\nclass Logout extends Component {\r\n    UNSAFE_componentWillMount() {\r\n        this.props.deleteToken();\r\n    }\r\n    \r\n    render() {\r\n        return <Redirect to={'/'} />\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        deleteToken: () => dispatch(deleteToken())\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Logout);","import React from 'react';\r\nimport classes from './Select.css'\r\nconst Select = props => {\r\n    const { options } = props;\r\n    const types = []\r\n    types.push(<option key='init'>Выберите роль</option>)\r\n    for (let i = 0; i < options.length; i++) {\r\n        types.push(<option key={i}>{options[i].label}</option>)\r\n    }\r\n\r\n    return (      \r\n            <select\r\n                id = {props.className}\r\n                onChange ={props.onChange} \r\n                className={classes.Select}>\r\n                {types}\r\n            </select>\r\n    )\r\n}\r\n\r\nexport default Select;","import React from 'react';\r\nimport Input from '../UI/Input/Input';\r\nimport classes from './UserType.css'\r\nimport Select from '../UI/Select/Select'\r\nconst UserType = props => {\r\n    \r\n        return (\r\n            <div className={classes.UserType}>\r\n                <Input\r\n                    type='email'\r\n                    label='Участник проекта'\r\n                    onChange={props.onChangeUsersInputHandler}\r\n                    className={props.cls}\r\n                />\r\n                <div className={classes.SelectGroup}>\r\n                    <label style={{margin: '0',paddingBottom: '2px',width: '220px'}}>Тип пользователя</label>\r\n                    <Select\r\n                        className={props.cls}\r\n                        options={props.options}\r\n                        onChange={props.onChangeUsersSelectHandler}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default UserType;","import React from 'react'\r\nimport classes from './CreateProject.css'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport { connect } from 'react-redux'\r\nimport { fetchProjectUserTypes, createProject } from '../../store/actions/project'\r\nimport UserType from '../UserType/UserType'\r\nclass CreateProject extends React.Component {\r\n    state = {\r\n        isFormValid: false,\r\n        touched: false,\r\n        formControls: {\r\n            title: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Название проекта',\r\n                errorMessage: 'Слишком длинное или короткое название проекта',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    maxLength: 100,\r\n                    minLength: 5\r\n                }\r\n            },\r\n            theme: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Тема проекта',\r\n                errorMessage: 'Слишком длинная или короткая тема проекта',\r\n                valid: false,\r\n                validation: {\r\n                    required: false,\r\n                    maxLength: 100,\r\n                    minLength: 5\r\n                }\r\n            },\r\n            description: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Описание проекта',\r\n                errorMessage: 'Введте корректное описание проекта',\r\n                valid: false,\r\n                validation: {\r\n                    required: false\r\n                }\r\n            }\r\n        },\r\n        numUsers: 1,\r\n        usersInputSelect: [\r\n            {\r\n                email: \"\",\r\n                type: \"\"\r\n            },\r\n        ],\r\n        types: []\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        this.props.fetchProjectUserTypes()\r\n    }\r\n\r\n    createProjectHandler = () => {\r\n        const formControls = { ...this.state.formControls }\r\n        const {usersInputSelect} = this.state\r\n\r\n        let isFormValid = true\r\n\r\n        Object.keys(formControls).forEach(name => {\r\n            formControls[name].valid = this.validateControl(formControls[name].value, formControls[name].validation)\r\n            isFormValid = formControls[name].valid && isFormValid\r\n        });\r\n\r\n        this.setState({\r\n            isFormValid,\r\n            touched: true\r\n        })\r\n\r\n        const fields = {}\r\n\r\n        Object.keys(formControls).forEach(name => {\r\n            fields[name] = formControls[name].value\r\n        })\r\n\r\n        usersInputSelect.forEach(userInputSelect => {\r\n            let valid = this.validateControl(userInputSelect, {\r\n                isUserInputSelect: true\r\n            })\r\n            isFormValid = valid && isFormValid\r\n        });\r\n\r\n        fields[\"users\"] = new Array(...usersInputSelect)\r\n\r\n        if (isFormValid) {\r\n            this.props.createProject(fields);\r\n\r\n        } else {\r\n            // TODO: Алерт об ошибке валидации\r\n        }\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        this.props.history.push('/user_projects');\r\n    }\r\n\r\n    onChangeHandler = (event, controlName) => {\r\n        const { formControls } = this.state\r\n        const control = { ...formControls[controlName] }\r\n\r\n        control.value = event.target.value;\r\n\r\n        formControls[controlName] = control;\r\n\r\n        this.setState({\r\n            formControls,\r\n        })\r\n    }\r\n\r\n    onChangeUsersInputHandler = (event) => {\r\n        const { usersInputSelect } = this.state\r\n        const users = new Array( ...usersInputSelect )\r\n        users[event.target.className.slice(3)].email = event.target.value\r\n        this.setState({\r\n            usersInputSelect: users\r\n        })\r\n\r\n    }\r\n\r\n    onChangeUsersSelectHandler = (event) => {\r\n        const { usersInputSelect } = this.state\r\n        const users = new Array( ...usersInputSelect )\r\n        users[event.target.id.slice(3)].type = event.target.value\r\n        this.setState({\r\n            usersInputSelect: users\r\n        })\r\n    }\r\n\r\n    validateControl(value, validation) {\r\n        if (!validation) {\r\n            return true;\r\n        }\r\n        let isValid = true;\r\n\r\n        if (validation.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n            if (validation.minLength) {\r\n                isValid = value.length >= validation.minLength && isValid;\r\n            }\r\n\r\n            if (validation.maxLength) {\r\n                isValid = value.length <= validation.maxLength && isValid;\r\n            }\r\n        }\r\n        if (validation.isUserInputSelect) {\r\n            isValid = value.email.trim() !== '' && isValid;\r\n            isValid = value.type.trim() !== '' && isValid;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    renderInputs() {\r\n        return Object.keys(this.state.formControls).map((controlName, index) => {\r\n            const control = this.state.formControls[controlName];\r\n            return (\r\n                <Input\r\n                    key={controlName + index}\r\n                    type={control.type}\r\n                    value={control.value}\r\n                    valid={control.valid}\r\n                    label={control.label}\r\n                    shouldValidate={!!control.validation}\r\n                    touched={this.state.touched}\r\n                    errorMessage={control.errorMessage}\r\n                    onChange={(event) => this.onChangeHandler(event, controlName)}\r\n                />\r\n            );\r\n        })\r\n    }\r\n\r\n    addUser = event => {\r\n        event.preventDefault();\r\n        const { numUsers, usersInputSelect } = this.state;\r\n        const us = new Array( ...usersInputSelect )\r\n        us.push({\r\n            email: \"\",\r\n            type: \"\"\r\n        })\r\n        this.setState({\r\n            numUsers: numUsers + 1,\r\n            usersInputSelect: us\r\n        });\r\n    }\r\n\r\n    remUser = event => {\r\n        event.preventDefault();\r\n        const { numUsers, usersInputSelect } = this.state;\r\n        if (numUsers > 0) {\r\n            const us = new Array( ...usersInputSelect )\r\n            us.pop()\r\n            this.setState({\r\n                numUsers: numUsers - 1,\r\n                usersInputSelect: us\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { numUsers } = this.state;\r\n        const options = this.props.projectUserTypes.map((projectUserType) => {\r\n            return {\r\n                value: projectUserType.id,\r\n                label: projectUserType.name,\r\n            }\r\n        })\r\n        const users = []\r\n        for (var i = 0; i < numUsers; i++) {\r\n            users.push(<UserType\r\n                key={i}\r\n                options={options}\r\n                onChangeUsersInputHandler={(event) => this.onChangeUsersInputHandler(event)}\r\n                onChangeUsersSelectHandler={(event) => this.onChangeUsersSelectHandler(event)}\r\n                cls={`ut-${i}`}\r\n            />)\r\n        }\r\n        return (\r\n            <div className={classes.CreateProject}>\r\n                <div>\r\n                    <h1>Создание проекта</h1>\r\n                    <form onSubmit={this.submitHandler} className={classes.CreateProjectForm}>\r\n\r\n                        {this.renderInputs()}\r\n                        {users}\r\n                        <Button onClick={this.addUser}>+</Button>\r\n                        <Button onClick={this.remUser}>-</Button>\r\n                        <Button\r\n                            type=\"success\"\r\n                            onClick={this.createProjectHandler}\r\n                        >\r\n                            Создать проект\r\n                        </Button>\r\n                    </form>\r\n                    {/* TODO: Вывести алерт об ошибке создания проекта / успешном создании проекта */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        projectUserTypes: state.projectReducer.projectUserTypes\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        createProject: (fields) => dispatch(createProject(fields)),\r\n        fetchProjectUserTypes: () => dispatch(fetchProjectUserTypes())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject);","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { fetchProjects, setCurrentProject } from '../../store/actions/project';\r\nimport classes from './UserProjects.css' \r\nclass UserProjects extends Component {\r\n\r\n    UNSAFE_componentWillMount() {\r\n        this.props.fetchProjects();\r\n    }\r\n    \r\n    onProjectClickHandler = (projectId) => {\r\n        this.props.setCurrentProject(projectId)\r\n    }\r\n\r\n    renderProjects() {\r\n        return this.props.projects.map((project) => {\r\n            return (\r\n                <li\r\n                    key={project.id}\r\n                >\r\n                    <NavLink\r\n                        to={'user_projects/' + project.id}\r\n                        onClick={() => this.onProjectClickHandler(project.id)}\r\n                    >\r\n                        {project.title}\r\n                    </NavLink>\r\n                </li>\r\n            );\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.card}>\r\n                <div className={classes.cardBody}>\r\n                    <h1>Список проектов</h1>\r\n                    {\r\n                        /* this.props.loading && this.props.projects.length !== 0\r\n                            ? <Loader />\r\n                            : <ul>\r\n                                {this.renderProjects()}\r\n                            </ul> */\r\n                        <ul>\r\n                            {this.renderProjects()}\r\n                        </ul>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        projects: state.projectReducer.projects,\r\n        // loading: state.project.loading\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchProjects: () => dispatch(fetchProjects()),\r\n        setCurrentProject: (projectId) => dispatch(setCurrentProject(projectId))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserProjects);","import axios from '../../axios/axios-stask'\r\nimport { TASK_ERROR, PROJECT_TASKS_LIST, CLEAR_PROJECT_TASKS, CURRENT_TASK, CLEAR_CURRENT_TASK } from './actionTypes'\r\n\r\nexport function createTask(formControls) {\r\n    return async dispatch => {\r\n        if (!formControls[\"start_date\"]) {\r\n            delete formControls[\"start_date\"]\r\n        }\r\n        if (!formControls[\"end_date\"]) {\r\n            delete formControls[\"end_date\"]\r\n        }\r\n        let url = \"create_task\"\r\n        const token = localStorage.getItem(\"token\")\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Token ' + token,\r\n            },\r\n            data: JSON.stringify(formControls),\r\n            url: url\r\n        }\r\n\r\n        await axios(options)\r\n            .then(() => {\r\n                dispatch(taskError(\"\"));\r\n            })\r\n            .catch(error => {\r\n                dispatch(taskError(\"Ошибка создания Таска - \"));\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchTasks(projectId) {\r\n    return async dispatch => {\r\n        const prId = {\r\n            id: projectId,\r\n        }\r\n        \r\n        let url = \"project_tasks\"\r\n        const token = localStorage.getItem(\"token\")\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Token ' + token,\r\n            },\r\n            data: JSON.stringify(prId),\r\n            url: url\r\n        }\r\n\r\n        await axios(options)\r\n            .then(response => {\r\n                dispatch(projectTasksList(response.data.tasks))\r\n            })\r\n            .catch(error => {\r\n                dispatch(taskError(\"Ошибка получения списка Тасков\"));\r\n            })\r\n    }\r\n}\r\n\r\nexport function setCurrentTask(taskId) {\r\n    return {\r\n        type: CURRENT_TASK,\r\n        taskId: taskId\r\n    }\r\n}\r\n\r\nexport function clearCurrentTask() {\r\n    return {\r\n        type: CLEAR_CURRENT_TASK,\r\n    }\r\n}\r\n\r\nexport function projectTasksList(tasks) {\r\n    return {\r\n        type: PROJECT_TASKS_LIST,\r\n        tasks: tasks\r\n    }\r\n}\r\n\r\nexport function taskError(errorMessage) {\r\n    return {\r\n        type: TASK_ERROR,\r\n        errorMessage: errorMessage\r\n    }\r\n}\r\n\r\nexport function clearProjectTasks() {\r\n    return {\r\n        type: CLEAR_PROJECT_TASKS,\r\n    }\r\n}","import React from 'react'\r\nimport classes from './CreateTask.css'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport { connect } from 'react-redux'\r\nimport { createTask } from '../../store/actions/task'\r\n\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\n\r\nconst getDateTimeForInput = (date) => {\r\n    return (date).getFullYear()+\"-\"+(((date).getMonth()+1 + \"\").length === 1 ? \"0\" + ((date).getMonth()+1) : ((date).getMonth()+1))+\"-\"+(((date).getDate() + \"\").length === 1 ? \"0\" + ((date).getDate()) : ((date).getDate()))+\"T\"+(((date).getHours() + \"\").length === 1 ? \"0\" + ((date).getHours()) : ((date).getHours()))+\":\"+(((date).getMinutes() + \"\").length === 1 ? \"0\" + ((date).getMinutes()) : ((date).getMinutes()))\r\n}\r\n\r\nclass CreateTask extends React.Component {\r\n    state = {\r\n        isFormValid: false,\r\n        touched: false,\r\n        formControls: {\r\n            title: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Название Таска',\r\n                errorMessage: 'Слишком длинное или короткое название Таска',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    maxLength: 100,\r\n                    minLength: 2\r\n                }\r\n            },\r\n            description: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Описание Таска',\r\n                errorMessage: 'Введте корректное описание Таска',\r\n                valid: false,\r\n                validation: {\r\n                    required: false\r\n                }\r\n            },\r\n            start_date: {\r\n                value: getDateTimeForInput(new Date()),\r\n                type: 'datetime-local',\r\n                label: 'Начало выполнения Таска',\r\n                errorMessage: 'Введте корректное начало выполнения Таска',\r\n                valid: false,\r\n                min: getDateTimeForInput(new Date()),\r\n                validation: {\r\n                    required: false,\r\n                    startDate: true\r\n                }\r\n            },\r\n            end_date: {\r\n                value: '',\r\n                type: 'datetime-local',\r\n                label: 'Конец выполнения Таска',\r\n                errorMessage: 'Введте корректный конец выполнения Таска',\r\n                valid: false,\r\n                min: getDateTimeForInput(new Date()),\r\n                validation: {\r\n                    required: false,\r\n                    endDate: true\r\n                }\r\n            },\r\n            is_public: {\r\n                checked: false,\r\n                type: 'checkbox',\r\n                label: 'Публичный',\r\n                errorMessage: '',\r\n                valid: false,\r\n                validation: {\r\n                    required: false\r\n                }\r\n            },\r\n        },\r\n        taskUsers: []\r\n    }\r\n\r\n    createTasktHandler = () => {\r\n        const formControls = { ...this.state.formControls }\r\n\r\n        let isFormValid = true\r\n\r\n        Object.keys(formControls).forEach(name => {\r\n            formControls[name].valid = this.validateControl(formControls[name].value, formControls[name].validation)\r\n            isFormValid = formControls[name].valid && isFormValid\r\n        });\r\n\r\n        this.setState({\r\n            isFormValid,\r\n            touched: true\r\n        })\r\n\r\n        const fields = {}\r\n\r\n        Object.keys(formControls).forEach(name => {\r\n            if (formControls[name].checked) {\r\n                fields[name] = formControls[name].checked\r\n            } else {\r\n                fields[name] = formControls[name].value\r\n            }\r\n        })\r\n        if (!fields[\"is_public\"]) {\r\n            fields[\"is_public\"] = false\r\n        }\r\n        fields[\"project\"] = this.props.currentProject.id\r\n        fields[\"users\"] = this.state.taskUsers\r\n        \r\n        if (isFormValid) {\r\n            this.props.createTask(fields);\r\n        } else {\r\n            // TODO: Алерт об ошибке валидации\r\n        }\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onChangeHandler = (event, controlName) => {\r\n        const { formControls } = this.state\r\n        const control = { ...formControls[controlName] }\r\n\r\n        control.value = event.target.value;\r\n        if (event.target.checked !== undefined) {\r\n            control.checked = event.target.checked;\r\n        }\r\n        formControls[controlName] = control;\r\n        this.setState({\r\n            formControls,\r\n        })\r\n    }\r\n\r\n    onSelectChangeHandler = event => {\r\n        let taskUsers = []\r\n        if (event) {\r\n            taskUsers = event.map(option => {\r\n                return (\r\n                    option.value\r\n                )\r\n            })\r\n        }\r\n        \r\n        this.setState({\r\n            taskUsers\r\n        })\r\n    }\r\n\r\n    validateControl(value, validation) {\r\n        if (!validation) {\r\n            return true;\r\n        }\r\n        let isValid = true;\r\n        if (validation.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n            if (validation.minLength) {\r\n                isValid = value.length >= validation.minLength && isValid;\r\n            }\r\n\r\n            if (validation.maxLength) {\r\n                isValid = value.length <= validation.maxLength && isValid;\r\n            }\r\n        }\r\n        if (validation.startDate && value !== undefined) {\r\n            isValid = new Date(value) - new Date(getDateTimeForInput(new Date())) >= 0 && isValid;\r\n        }\r\n\r\n        if (validation.endDate && value !== \"\") {\r\n            isValid = new Date(value) - new Date(this.state.formControls.start_date.value) >= 0 && isValid;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    renderInputs() {\r\n        return Object.keys(this.state.formControls).map((controlName, index) => {\r\n            const control = this.state.formControls[controlName];\r\n            return (\r\n                <Input\r\n                    key={controlName + index}\r\n                    type={control.type}\r\n                    value={control.value}\r\n                    valid={control.valid}\r\n                    label={control.label}\r\n                    shouldValidate={!!control.validation}\r\n                    touched={this.state.touched}\r\n                    errorMessage={control.errorMessage}\r\n                    onChange={(event) => this.onChangeHandler(event, controlName)}\r\n                    min={control.min || null}\r\n                    checked={control.checked}\r\n                />\r\n            );\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const animatedComponents = makeAnimated();\r\n\r\n        const options = this.props.projectUsers.map(user => {\r\n            return {\r\n                value: user.id,\r\n                label: user.email\r\n            }\r\n        })\r\n        return (\r\n            <div className={classes.CreateTask}>\r\n                <div>\r\n                    <h1>Создание Таска</h1>\r\n                    <form onSubmit={this.submitHandler} className={classes.CreateTaskForm}>\r\n\r\n                        {this.renderInputs()}\r\n                        <label style={{fontWeight: 'bold'}}>Выбор участника</label>\r\n                        <Select\r\n                            closeMenuOnSelect={false}\r\n                            components={animatedComponents}\r\n                            defaultValue={[]}\r\n                            isMulti\r\n                            options={options}\r\n                            onChange={(event) => this.onSelectChangeHandler(event)}\r\n                        />\r\n\r\n                        <Button\r\n                            type=\"success\"\r\n                            onClick={this.createTasktHandler}\r\n                        >\r\n                            Создать Таск\r\n                        </Button>\r\n                    </form>\r\n                    {/* TODO: Вывести алерт об ошибке создания Таска / успешном создании Таска */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        currentProject: state.projectReducer.currentProject\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        createTask: (fields) => dispatch(createTask(fields))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateTask);","import React, {Component} from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { fetchTasks, setCurrentTask } from '../../store/actions/task';\r\nimport classes from './UserTasks.css' \r\n\r\nclass UserTasks extends Component {\r\n\r\n    UNSAFE_componentWillMount() {\r\n        this.props.fetchTasks(this.props.currentProject.id);\r\n    }\r\n\r\n    renderTasks() {\r\n        return this.props.tasks.map((task) => {\r\n            return (\r\n                <li\r\n                    key={task.id}\r\n                >\r\n                    <NavLink\r\n                        to={task.project + \"/\" + task.id}\r\n                        onClick={() => this.props.setCurrentTask(task.id)}\r\n                    >\r\n                        {task.title}\r\n                    </NavLink>\r\n                </li>\r\n            );\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={classes.UserTasks}>\r\n                <div>\r\n                    <h1>Список заданий</h1>\r\n                    {\r\n                        /* this.props.loading && this.props.projects.length !== 0\r\n                            ? <Loader />\r\n                            : <ul>\r\n                                {this.renderProjects()}\r\n                            </ul> */\r\n                        <ul>\r\n                            {this.renderTasks()}\r\n                        </ul>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        tasks: state.taskReducer.tasks,\r\n        currentProject: state.projectReducer.currentProject,\r\n        // loading: state.project.loading\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchTasks: (projectId) => dispatch(fetchTasks(projectId)),\r\n        setCurrentTask: (taskId) => dispatch(setCurrentTask(taskId)),\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserTasks);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { clearCurrentProject, fetchProjectUsers } from '../../store/actions/project';\r\nimport CreateTask from '../CreateTask/CreateTask';\r\nimport classes from './Project.css'\r\nimport UserTasks from '../UserTasks/UserTasks'\r\n\r\nclass Project extends Component {\r\n    /* componentWillUnmount() {\r\n        this.props.clearCurrentProject()\r\n    } */\r\n\r\n    UNSAFE_componentWillMount() {\r\n        this.props.fetchProjectUsers(this.props.currentProject.id)\r\n        const pExist = this.props.location.pathname.match(/\\d+/g);\r\n        if (pExist[0] !== this.props.currentProject.id + ''){\r\n            this.props.history.push('/user_projects');\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { title, theme, description } = this.props.currentProject;\r\n        return (\r\n            <div className={classes.Project}>\r\n                <div className=\"jumbotron\">\r\n                    <h2 className=\"display-4\">{title}</h2>\r\n                    <p className=\"lead\">{theme}</p>\r\n                    <hr className=\"my-4\" />\r\n                    <p>{description}</p>\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <UserTasks />\r\n                        <CreateTask projectUsers={this.props.projectUsers} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        currentProject: state.projectReducer.currentProject,\r\n        projectUsers: state.projectReducer.projectUsers\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        clearCurrentProject: () => dispatch(clearCurrentProject()),\r\n        fetchProjectUsers: (projectId) => dispatch(fetchProjectUsers(projectId)),\r\n    };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Project);","import axios from '../../axios/axios-stask'\r\nimport { TODO_ERROR, TASK_TODOS_LIST, CLEAR_CURRENT_TODO, CURRENT_TODO, CLEAR_TASK_TODOS } from './actionTypes'\r\n\r\nexport function createTodo(formControls) {\r\n    return async dispatch => {\r\n        \r\n        let url = \"create_todo\"\r\n        const token = localStorage.getItem(\"token\")\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Token ' + token,\r\n            },\r\n            data: JSON.stringify(formControls),\r\n            url: url\r\n        }\r\n\r\n        await axios(options)\r\n            .then(() => {\r\n                dispatch(todoError(\"\"));\r\n            })\r\n            .catch(() => {\r\n                dispatch(todoError(\"Ошибка создания Тоду\"));\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchTodos(taskId) {\r\n    return async dispatch => {\r\n        const tsId = {\r\n            id: taskId,\r\n        }\r\n        \r\n        let url = \"task_todos\"\r\n        const token = localStorage.getItem(\"token\")\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Token ' + token,\r\n            },\r\n            data: JSON.stringify(tsId),\r\n            url: url\r\n        }\r\n\r\n        await axios(options)\r\n            .then(response => {\r\n                dispatch(taskTodosList(response.data.todos))\r\n            })\r\n            .catch(error => {\r\n                dispatch(todoError(\"Ошибка получения списка туду\"));\r\n            })\r\n    }\r\n}\r\n\r\nexport function setCurrentTodo(todoId) {\r\n    return {\r\n        type: CURRENT_TODO,\r\n        todoId: todoId\r\n    }\r\n}\r\n\r\nexport function clearCurrentTodo() {\r\n    return {\r\n        type: CLEAR_CURRENT_TODO,\r\n    }\r\n}\r\n\r\nexport function taskTodosList(todos) {\r\n    return {\r\n        type: TASK_TODOS_LIST,\r\n        todos: todos\r\n    }\r\n}\r\n\r\nexport function todoError(errorMessage) {\r\n    return {\r\n        type: TODO_ERROR,\r\n        errorMessage: errorMessage\r\n    }\r\n}\r\n\r\nexport function clearTaskTodos() {\r\n    return {\r\n        type: CLEAR_TASK_TODOS,\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { fetchTodos, setCurrentTodo } from '../../store/actions/todo';\r\n\r\n\r\nclass ToDoList extends Component {\r\n    state = {\r\n        checked: []\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        this.props.fetchTodos(this.props.currentTask.id);\r\n    }\r\n\r\n    handleToggle = value => () => {\r\n        const { checked } = this.state\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        this.setState({\r\n            checked: newChecked\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <List>\r\n                {\r\n                    this.props.todos.map((todo) => {\r\n                        const labelId = `checkbox-list-label-${todo.id}`;\r\n\r\n                        return (\r\n                            <ListItem key={todo.id} role={undefined} dense button onClick={this.handleToggle(todo.id)}>\r\n                                <ListItemIcon>\r\n                                    <Checkbox\r\n                                        edge=\"start\"\r\n                                        checked={this.state.checked.indexOf(todo.id) !== -1}\r\n                                        tabIndex={-1}\r\n                                        disableRipple\r\n                                        inputProps={{ 'aria-labelledby': labelId }}\r\n                                        color={\"primary\"}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText id={labelId} primary={todo.text} />\r\n                            </ListItem>\r\n                        );\r\n                    })\r\n                }\r\n            </List>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        todos: state.todoReducer.todos,\r\n        currentTask: state.taskReducer.currentTask\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchTodos: (taskId) => dispatch(fetchTodos(taskId)),\r\n        setCurrentTodo: (todoId) => dispatch(setCurrentTodo(todoId))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoList);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { clearCurrentTask } from '../../store/actions/task';\r\nimport classes from './Task.css'\r\nimport ToDoList from '../ToDoList/ToDoList';\r\n\r\nclass Task extends Component {\r\n    /* componentWillUnmount() {\r\n        this.props.clearCurrentTask()\r\n    } */\r\n\r\n    UNSAFE_componentWillMount() {\r\n        const ptExist = this.props.location.pathname.match(/\\d+/g);\r\n        if (ptExist[0] !== this.props.currentTask.project + '' ||  ptExist[1] !== this.props.currentTask.id + ''){\r\n            this.props.history.push(`/user_projects/${this.props.currentTask.project}`);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { title, description } = this.props.currentTask;\r\n        return (\r\n            <div className={classes.Task}>\r\n                <div className=\"jumbotron\">\r\n                    <h2 className=\"display-4\">{title}</h2>\r\n                    <hr className=\"my-4\" />\r\n                    <p>{description}</p>\r\n                    <ToDoList />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        currentTask: state.taskReducer.currentTask\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        clearCurrentTask: () => dispatch(clearCurrentTask()),\r\n    };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Task);","import React from 'react'\r\nimport './App.css'\r\nimport Layout from './hoc/Layout/Layout'\r\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport Home from './components/Home/Home'\r\nimport Auth from './components/Auth/Auth'\r\nimport { autoLogin } from './store/actions/auth'\r\nimport Registration from './components/Registration/Registration'\r\nimport Logout from './components/Logout/Logout'\r\nimport CreateProject from './components/CreateProject/CreateProject'\r\nimport UserProjects from './components/UserProjects/UserProjects'\r\nimport Project from './components/Project/Project'\r\nimport Task from './components/Task/Task'\r\n\r\nclass App extends React.Component {\r\n\tUNSAFE_componentWillMount() {\r\n\t\tthis.props.autoLogin();\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet routers = (\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route path=\"/auth\" component={Auth} />\r\n\t\t\t\t<Route path=\"/registration\" component={Registration} />\r\n\t\t\t\t<Route exact path=\"/\" component={Home} />\r\n\t\t\t\t<Redirect to={\"/\"} />\r\n\t\t\t</Switch>\r\n\t\t);\r\n\t\t\r\n\t\tif (this.props.isAuthenticated) {\r\n\t\t\trouters = (\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path=\"/create_project/\" component={CreateProject} />\r\n\t\t\t\t\t<Route path=\"/user_projects/:id/:id/\" component={Task}/>\r\n\t\t\t\t\t<Route path=\"/user_projects/:id/\" component={Project}/>\r\n\t\t\t\t\t<Route path=\"/user_projects/\" component={UserProjects} />\r\n\t\t\t\t\t<Route path=\"/logout/\" component={Logout} />\r\n\t\t\t\t\t<Route path=\"/\" exact component={Home} />\r\n\t\t\t\t\t<Redirect to={\"/\"} />\r\n\t\t\t\t</Switch>\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<Layout>\r\n\t\t\t\t{routers}\r\n\t\t\t</Layout>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tisAuthenticated: !!state.authReducer.token\r\n\t};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n\t\tautoLogin: () => dispatch(autoLogin())\r\n\t};\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { AUTH_SUCCESS, AUTH_LOGOUT, AUTH_ERROR, REGISTRATION_ERROR } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    token: null,\r\n    user: {},\r\n    errorMessage: \"\"\r\n}\r\n\r\nexport default function authReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case AUTH_SUCCESS:\r\n            return {\r\n                ...state,\r\n                token: action.token,\r\n                user: action.user,\r\n                errorMessage: \"\"\r\n            };\r\n        case AUTH_LOGOUT:\r\n            return initialState;\r\n        case AUTH_ERROR:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            };\r\n        case REGISTRATION_ERROR:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { PROJECT_ERROR, USER_PROJECTS_LIST, CLEAR_USER_PROJECTS, CURRENT_PROJECT, CLEAR_CURRENT_PROJECT, PROJECTS_USERS_LIST, PROJECT_USER_TYPES_LIST } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    projects: [],\r\n    errorMessage: \"\",\r\n    currentProject: {},\r\n    projectUsers: [],\r\n    projectUserTypes: []\r\n}\r\n\r\nexport default function projectReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_PROJECTS_LIST:\r\n            return {\r\n                ...state,\r\n                projects: action.projects,\r\n                errorMessage: \"\"\r\n            };\r\n        case PROJECT_ERROR:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            };\r\n        case CURRENT_PROJECT:\r\n            let curProject = {}\r\n            state.projects.forEach(project => {\r\n                if (project.id === action.projectId) {\r\n                    curProject = project\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                currentProject: curProject\r\n            };\r\n        case CLEAR_CURRENT_PROJECT:\r\n            return {\r\n                ...state,\r\n                currentProject: {}\r\n            };\r\n        case PROJECTS_USERS_LIST:\r\n            return {\r\n                ...state,\r\n                projectUsers: action.projectUsers\r\n            };\r\n        case PROJECT_USER_TYPES_LIST:\r\n            return {\r\n                ...state,\r\n                projectUserTypes: action.projectUserTypes\r\n            };\r\n        case CLEAR_USER_PROJECTS:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { TASK_ERROR, PROJECT_TASKS_LIST, CLEAR_PROJECT_TASKS, CURRENT_TASK, CLEAR_CURRENT_TASK } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    tasks: [],\r\n    errorMessage: \"\",\r\n    currentTask: {}\r\n}\r\n\r\nexport default function taskReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case PROJECT_TASKS_LIST:\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks,\r\n                errorMessage: \"\"\r\n            };\r\n        case TASK_ERROR:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            };\r\n        case CURRENT_TASK:\r\n            let curTask = {}\r\n            state.tasks.forEach(task => {\r\n                if (task.id === action.taskId) {\r\n                    curTask = task\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                currentTask: curTask,\r\n                errorMessage: \"\"\r\n            };\r\n        case CLEAR_CURRENT_TASK:\r\n            return {\r\n                ...state,\r\n                currentTask: {},\r\n                errorMessage: \"\"\r\n            };\r\n        case CLEAR_PROJECT_TASKS:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { TODO_ERROR, TASK_TODOS_LIST, CLEAR_CURRENT_TODO, CURRENT_TODO, CLEAR_TASK_TODOS } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    todos: [],\r\n    errorMessage: \"\",\r\n    currentTodo: {}\r\n}\r\n\r\nexport default function todoReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case TASK_TODOS_LIST:\r\n            return {\r\n                ...state,\r\n                todos: action.todos,\r\n                errorMessage: \"\"\r\n            };\r\n        case TODO_ERROR:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            };\r\n        case CURRENT_TODO:\r\n            let curTodo = {}\r\n            state.todos.forEach(todo => {\r\n                if (todo.id === action.todoId) {\r\n                    curTodo = todo\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                currentTodo: curTodo,\r\n                errorMessage: \"\"\r\n            };\r\n        case CLEAR_CURRENT_TODO:\r\n            return {\r\n                ...state,\r\n                currentTodo: {},\r\n                errorMessage: \"\"\r\n            };\r\n        case CLEAR_TASK_TODOS:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport authReducer from './auth';\r\nimport projectReducer from './project';\r\nimport taskReducer from './task';\r\nimport todoReducer from './todo';\r\n\r\nexport default combineReducers({\r\n    authReducer,\r\n    projectReducer,\r\n    taskReducer,\r\n    todoReducer\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport { Provider } from \"react-redux\";\r\nimport rootReducer from './store/reducers/rootReducer.js';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nconst composeEnhancers =\r\n\ttypeof window === 'object' &&\r\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n\t\t\t// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n\t\t}) : compose;\r\n\r\nconst persistConfig = {\r\n\tkey: 'root',\r\n\tstorage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\n/* const store = createStore(\r\n\trootReducer,\r\n\tcomposeEnhancers(\r\n\t\tapplyMiddleware(thunk)\r\n\t)\r\n); */\r\n\r\nlet store = createStore(persistedReducer, composeEnhancers(applyMiddleware(thunk)))\r\nlet persistor = persistStore(store)\r\n\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<BrowserRouter>\r\n\t\t\t<PersistGate loading={null} persistor={persistor}>\r\n\t\t\t\t<App />\r\n\t\t\t</PersistGate>\r\n\t\t</BrowserRouter>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__DhNf9\",\"AuthForm\":\"Auth_AuthForm__2N-UP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2lUQi\",\"invalid\":\"Input_invalid__20xI2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2WSLj\",\"success\":\"Button_success__3YAmo\",\"primary\":\"Button_primary__3Sg1K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Registration\":\"Registration_Registration__1307e\",\"RegistrationForm\":\"Registration_RegistrationForm__2SDQF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CreateProject\":\"CreateProject_CreateProject__2rVmo\",\"CreateProjectForm\":\"CreateProject_CreateProjectForm__SNxHv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserType\":\"UserType_UserType__2gBwh\",\"SelectGroup\":\"UserType_SelectGroup__3v2Qh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"UserProjects_card__2Dtop\",\"cardBody\":\"UserProjects_cardBody__1SPOf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CreateTask\":\"CreateTask_CreateTask__1KZRi\",\"CreateTaskForm\":\"CreateTask_CreateTaskForm__1AsaJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3Glqr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__1eyLK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__27h3f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Select\":\"Select_Select__3EMUb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Project\":\"Project_Project__3UQCl\",\"jumbotron\":\"Project_jumbotron__2xYJw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserTasks\":\"UserTasks_UserTasks__2Kxop\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Task\":\"Task_Task__2_BHY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3MMMQ\"};"],"sourceRoot":""}