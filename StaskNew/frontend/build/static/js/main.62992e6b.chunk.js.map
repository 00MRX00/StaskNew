{"version":3,"sources":["components/Auth/Auth.css","components/UI/Input/Input.css","components/UI/Button/Button.css","hoc/Layout/Layout.css","components/Home/Home.css","App.css","components/Header/Header.css","components/Header/Header.js","hoc/Layout/Layout.js","components/Home/Home.js","components/UI/Input/Input.js","components/UI/Button/Button.js","axios/axios-stask.js","components/Auth/Auth.js","store/actions/auth.js","App.js","serviceWorker.js","store/reducers/auth.js","store/reducers/rootReducer.js","store/actions/actionTypes.js","index.js"],"names":["module","exports","Header","props","className","id","href","Layout","classes","this","children","React","Component","connect","state","Home","withRouter","dispatch","isInvalid","valid","touched","shouldValidate","Input","inputType","type","cls","htmlFor","Math","random","push","invalid","join","label","value","onChange","errorMessage","Buttons","Button","onClick","disabled","axios","create","baseURL","Auth","isFormValid","formControls","email","validation","required","password","minLength","loginHandler","auth","registerHandler","validateControl","submitHandler","event","preventDefault","onChangeHandler","controlName","control","target","setState","isValid","trim","test","String","toLocaleLowerCase","length","Object","keys","map","index","key","onSubmit","AuthForm","renderInputs","a","authData","returnSecureToken","post","headers","response","data","console","log","App","routes","path","component","exact","to","Boolean","window","location","hostname","match","initialState","token","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.62992e6b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__DhNf9\",\"AuthForm\":\"Auth_AuthForm__2N-UP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2lUQi\",\"invalid\":\"Input_invalid__20xI2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2WSLj\",\"success\":\"Button_success__3YAmo\",\"error\":\"Button_error__qCCOC\",\"primary\":\"Button_primary__3Sg1K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3Glqr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__27h3f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3MMMQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__1eyLK\"};","import React from 'react'\r\nimport classes from './Header.css'\r\n\r\nconst Header = props => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"/\">Logo <span className=\"sr-only\">(current)</span></a>\r\n                    </li>\r\n                </ul>\r\n                <ul className=\"navbar-nav my-2 my-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"auth\">Авторизация <span className=\"sr-only\">(current)</span></a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"/\">Регистрация <span className=\"sr-only\">(current)</span></a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport classes from './Layout.css';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../../components/Header/Header';\r\n\r\nclass Layout extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.Layout + \" container\"}>\r\n                <Header />\r\n\r\n                <main>\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        \r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Layout);","import React, { Component } from 'react'\r\nimport classes from './Home.css'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.Home}>\r\n                <h1>This is Home page!</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\t\r\n\t};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n\t\t\r\n\t};\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Home));","import React from 'react';\r\nimport classes from './Input.css';\r\n\r\nfunction isInvalid({valid, touched, shouldValidate}) {\r\n    return !valid && shouldValidate && touched;\r\n}\r\n\r\nconst Input = props => {\r\n    const inputType = props.type || \"text\";\r\n    const cls = [classes.Input];\r\n    const htmlFor = `${inputType}-${Math.random()}`;\r\n\r\n    if (isInvalid(props)) {\r\n        cls.push(classes.invalid)\r\n    }\r\n\r\n    return (\r\n        <div className={cls.join(' ')}>\r\n            <label htmlFor={htmlFor}>{props.label}</label>\r\n            <input\r\n                type={props.type}\r\n                id={htmlFor}\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n            />\r\n\r\n            {\r\n                isInvalid(props)\r\n                ? <span>{props.errorMessage || \"Введите верные значения\"}</span>\r\n                : null\r\n            }\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Input;","import React from 'react';\r\nimport classes from './Button.css';\r\n\r\nconst Buttons = props => {\r\n    const cls = [\r\n        classes.Button,\r\n        classes[props.type]\r\n    ]\r\n    \r\n    return (\r\n        <button \r\n            onClick={props.onClick}\r\n            className={cls.join(' ')}\r\n            disabled={props.disabled}\r\n        >\r\n            {props.children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Buttons;","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://localhost:8000/api\",\r\n})","import React from 'react'\r\nimport classes from './Auth.css'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport { connect } from 'react-redux'\r\nimport { auth } from '../../store/actions/auth'\r\n\r\nfunction vaidateEmail(email) {\r\n    const re = /[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+/gm;\r\n    return re.test(String(email).toLocaleLowerCase());\r\n}\r\n\r\nclass Auth extends React.Component {\r\n    state = {\r\n        isFormValid: false,\r\n        formControls: {\r\n            email: {\r\n                value: '',\r\n                type: 'email',\r\n                label: 'Email',\r\n                errorMessage: 'Введте корректный email',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    email: true\r\n                }\r\n            },\r\n            password: {\r\n                value: '',\r\n                type: 'password',\r\n                label: 'Пароль',\r\n                errorMessage: 'Введте корректный пароль',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    loginHandler = () => {\r\n        this.props.auth(\r\n            this.state.formControls.email.value,\r\n            this.state.formControls.password.value,\r\n        );\r\n    }\r\n\r\n    registerHandler = () => {\r\n        //TODO: Валидация полей при регистрации + метод регистрации\r\n        const {email} = this.state.formControls\r\n        const {password} = this.state.formControls\r\n        if (this.validateControl(email.value, email.validation) && this.validateControl(password.value, password.validation)) {\r\n            this.props.auth(\r\n                email.value,\r\n                password.value,\r\n            );\r\n        } \r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onChangeHandler = (event, controlName) => {\r\n        const { formControls } = this.state\r\n        const control = { ...formControls[controlName] }\r\n\r\n        control.value = event.target.value;\r\n\r\n        formControls[controlName] = control;\r\n\r\n        this.setState({\r\n            formControls,\r\n        })\r\n    }\r\n\r\n    validateControl(value, validation) {\r\n        if (!validation) {\r\n            return true;\r\n        }\r\n        let isValid = true;\r\n\r\n        if (validation.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (validation.email) {\r\n            isValid = vaidateEmail(value) && isValid;\r\n        }\r\n\r\n        if (validation.minLength) {\r\n            isValid = value.length >= validation.minLength && isValid;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    renderInputs() {\r\n        return Object.keys(this.state.formControls).map((controlName, index) => {\r\n            const control = this.state.formControls[controlName];\r\n            return (\r\n                <Input\r\n                    key={controlName + index}\r\n                    type={control.type}\r\n                    value={control.value}\r\n                    valid={control.valid}\r\n                    label={control.label}\r\n                    shouldValidate={!!control.validation}\r\n                    errorMessage={control.errorMessage}\r\n                    onChange={(event) => this.onChangeHandler(event, controlName)}\r\n                />\r\n            );\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Auth}>\r\n                <div>\r\n                    <h1>Авторизация</h1>\r\n\r\n                    <form onSubmit={this.submitHandler} className={classes.AuthForm}>\r\n\r\n                        {this.renderInputs()}\r\n\r\n                        <Button\r\n                            type=\"success\"\r\n                            onClick={this.loginHandler}\r\n                        >Войти</Button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        auth: (email, password) => dispatch(auth(email, password))\r\n    };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Auth);","import axios from '../../axios/axios-stask'\r\nimport { AUTH_SUCCESS } from './actionTypes'\r\n\r\nexport function auth(email, password) {\r\n    return async dispatch => {\r\n        const authData = {\r\n            email,\r\n            password,\r\n            returnSecureToken: true\r\n        }\r\n\r\n        let url = \"auth/login/\"\r\n\r\n        const response = await axios.post(url, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        },authData);\r\n        const data = response.data;\r\n\r\n        console.log(data)\r\n\r\n        /* localStorage.setItem('token', data.idToken);\r\n\r\n        dispatch(authSuccess(data.idToken)); */\r\n    };\r\n}\r\n\r\nexport function authSuccess(token) {\r\n    return {\r\n        type: AUTH_SUCCESS,\r\n        token\r\n    };\r\n}\r\n\r\nexport function autoLogin() {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token');\r\n\r\n        dispatch(authSuccess(token));\r\n\r\n    };\r\n}","import React from 'react'\r\nimport './App.css'\r\nimport Layout from './hoc/Layout/Layout'\r\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport Home from './components/Home/Home'\r\nimport Auth from './components/Auth/Auth'\r\n\r\nclass App extends React.Component {\r\n\trender() {\r\n\t\tlet routes = (\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route path=\"/auth\" component={Auth} />\r\n\t\t\t\t<Route exact path=\"/\" component={Home} />\r\n\t\t\t\t<Redirect to={\"/\"} />\r\n\t\t\t</Switch>\r\n\t\t);\r\n\t\t/*\r\n\t\tif (this.props.isAuthenticated) {\r\n\t\t\troutes = (\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path=\"/\" exact component={QuizList} />\r\n\t\t\t\t\t<Redirect to={\"/\"} />\r\n\t\t\t\t</Switch>\r\n\t\t\t);\r\n\t\t} */\r\n\r\n\t\treturn (\r\n\t\t\t<Layout>\r\n\t\t\t\t{routes}\r\n\t\t\t</Layout>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\t\r\n\t};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n\t\t\r\n\t};\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { AUTH_SUCCESS } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    token: null\r\n}\r\n\r\nexport default function authReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case AUTH_SUCCESS:\r\n            return {\r\n                ...state,\r\n                token: action.token\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport auth from './auth';\r\n\r\nexport default combineReducers({\r\n    auth,\r\n})","export const AUTH_SUCCESS = 'AUTH_SUCCESS';","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport { Provider }\tfrom \"react-redux\";\r\nimport rootReducer from './store/reducers/rootReducer.js';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    }) : compose;\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tcomposeEnhancers(\r\n\t\tapplyMiddleware(thunk)\r\n\t)\r\n);\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<BrowserRouter>\r\n\t\t\t<App />\r\n\t\t</BrowserRouter>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}