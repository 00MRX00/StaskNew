{"version":3,"sources":["components/Auth/Auth.css","components/UI/Input/Input.css","components/UI/Button/Button.css","components/Registration/Registration.css","hoc/Layout/Layout.css","components/Header/Header.css","components/Home/Home.css","App.css","components/Header/Header.js","hoc/Layout/Layout.js","components/Home/Home.js","components/UI/Input/Input.js","components/UI/Button/Button.js","axios/axios-stask.js","store/actions/auth.js","store/actions/actionTypes.js","components/Auth/Auth.js","components/Registration/Registration.js","store/actions/registration.js","components/Logout/Logout.js","App.js","serviceWorker.js","store/reducers/auth.js","store/reducers/rootReducer.js","index.js"],"names":["module","exports","connect","state","isAuthenticated","auth","token","dispatch","props","className","classes","Header","id","href","Fragment","Layout","this","children","React","Component","Home","withRouter","isInvalid","valid","touched","shouldValidate","Input","inputType","type","cls","htmlFor","Math","random","push","invalid","join","label","value","onChange","errorMessage","Buttons","Button","onClick","disabled","axios","create","baseURL","deleteToken","a","localStorage","getItem","options","method","headers","url","console","log","then","removeItem","authSuccess","Auth","isFormValid","formControls","email","validation","required","password","minLength","loginHandler","submitHandler","event","preventDefault","onChangeHandler","controlName","control","target","setState","Object","keys","map","index","key","onSubmit","AuthForm","renderInputs","requestData","data","JSON","stringify","response","setItem","catch","error","Registration","maxLength","username","first_name","last_name","patronymic","registerHandler","forEach","name","validateControl","fields","registration","isValid","trim","test","String","toLocaleLowerCase","length","RegistrationForm","Logout","to","App","autoLogin","routers","path","component","exact","Boolean","window","location","hostname","match","initialState","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","unregister","message"],"mappings":"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","file":"static/js/main.d4227f99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__DhNf9\",\"AuthForm\":\"Auth_AuthForm__2N-UP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2lUQi\",\"invalid\":\"Input_invalid__20xI2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2WSLj\",\"success\":\"Button_success__3YAmo\",\"error\":\"Button_error__qCCOC\",\"primary\":\"Button_primary__3Sg1K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Registration\":\"Registration_Registration__1307e\",\"RegistrationForm\":\"Registration_RegistrationForm__2SDQF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3Glqr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__1eyLK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__27h3f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3MMMQ\"};","import React from 'react'\r\nimport classes from './Header.css'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Header = props => {\r\n    return (\r\n        <nav className={classes.Header + \" navbar navbar-expand-lg navbar-light bg-light\"}>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"/\">Logo <span className=\"sr-only\">(current)</span></a>\r\n                    </li>\r\n                </ul>\r\n                <ul className=\"navbar-nav my-2 my-lg-0\">\r\n                    {\r\n                        !props.isAuthenticated\r\n                            ? <React.Fragment>\r\n                                <li className=\"nav-item\">\r\n                                    <a className=\"nav-link\" href=\"auth\">Авторизация <span className=\"sr-only\">(current)</span></a>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <a className=\"nav-link\" href=\"registration\">Регистрация <span className=\"sr-only\">(current)</span></a>\r\n                                </li>\r\n                            </React.Fragment>\r\n                            : <React.Fragment>\r\n                                <li className=\"nav-item\">\r\n                                    <a className=\"nav-link\" href=\"logout\">Выйти <span className=\"sr-only\">(current)</span></a>\r\n                                </li>\r\n                            </React.Fragment>\r\n                    }\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isAuthenticated: !!state.auth.token\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React from 'react';\r\nimport classes from './Layout.css';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../../components/Header/Header';\r\n\r\nclass Layout extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.Layout + \" container\"}>\r\n                <Header />\r\n\r\n                <main>\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        \r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Layout);","import React, { Component } from 'react'\r\nimport classes from './Home.css'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.Home}>\r\n                <h1>This is Home page!</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\t\r\n\t};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n\t\t\r\n\t};\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Home));","import React from 'react';\r\nimport classes from './Input.css';\r\n\r\nfunction isInvalid({valid, touched, shouldValidate}) {\r\n    return !valid && shouldValidate && touched;\r\n}\r\n\r\nconst Input = props => {\r\n    const inputType = props.type || \"text\";\r\n    const cls = [classes.Input];\r\n    const htmlFor = `${inputType}-${Math.random()}`;\r\n\r\n    if (isInvalid(props)) {\r\n        cls.push(classes.invalid)\r\n    }\r\n\r\n    return (\r\n        <div className={cls.join(' ')}>\r\n            <label htmlFor={htmlFor}>{props.label}</label>\r\n            <input\r\n                type={props.type}\r\n                id={htmlFor}\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n            />\r\n\r\n            {\r\n                isInvalid(props)\r\n                ? <span>{props.errorMessage || \"Введите верные значения\"}</span>\r\n                : null\r\n            }\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Input;","import React from 'react';\r\nimport classes from './Button.css';\r\n\r\nconst Buttons = props => {\r\n    const cls = [\r\n        classes.Button,\r\n        classes[props.type]\r\n    ]\r\n    \r\n    return (\r\n        <button \r\n            onClick={props.onClick}\r\n            className={cls.join(' ')}\r\n            disabled={props.disabled}\r\n        >\r\n            {props.children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Buttons;","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n    baseURL: \"http://127.0.0.1:8000/api\",\r\n})","import axios from '../../axios/axios-stask'\r\nimport { AUTH_SUCCESS, AUTH_LOGOUT, AUTH_ERROR } from './actionTypes'\r\n\r\nexport function auth(email, password) {\r\n    return async dispatch => {\r\n        const requestData = {\r\n            email: email,\r\n            password: password,\r\n        }\r\n\r\n        let url = \"auth/login\"\r\n\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: JSON.stringify(requestData),\r\n            url: url\r\n        };\r\n\r\n        await axios(options)\r\n            .then(response => {\r\n                localStorage.setItem('token', response.data.token);\r\n                dispatch(authSuccess(response.data.token));\r\n            })\r\n            .catch(error => {\r\n                dispatch(authError());\r\n            })\r\n    };\r\n}\r\n\r\nexport function deleteToken() {\r\n    return async dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        const options = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': 'Token ' + token,\r\n            },\r\n            url: \"auth/logout\"\r\n        };\r\n        console.log(token)\r\n\r\n        await axios(options)\r\n            .then(() => {\r\n                localStorage.removeItem('token');\r\n                dispatch(logout())\r\n            })\r\n    };\r\n}\r\n\r\nexport function logout() {\r\n    return {\r\n        type: AUTH_LOGOUT\r\n    };\r\n}\r\n\r\nexport function authSuccess(token) {\r\n    return {\r\n        type: AUTH_SUCCESS,\r\n        token\r\n    };\r\n}\r\n\r\nexport function authError() {\r\n    return {\r\n        type: AUTH_ERROR,\r\n        errorMessage: \"Неправильный логин или пароль\"\r\n    };\r\n}\r\n\r\nexport function autoLogin() {\r\n    return async dispatch => {\r\n        const token = localStorage.getItem('token');\r\n\r\n        if (token) {\r\n            const options = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': 'Token ' + token,\r\n                },\r\n                url: \"auth/user\"\r\n            };\r\n\r\n\r\n            await axios(options)\r\n                .then(() => {\r\n                    dispatch(authSuccess(token));\r\n                })\r\n                .catch(error => {\r\n                    dispatch(deleteToken(token))\r\n                })\r\n\r\n        } else {\r\n            dispatch(deleteToken(token))\r\n        }\r\n\r\n    };\r\n}","export const AUTH_SUCCESS = 'AUTH_SUCCESS';\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\n\r\nexport const REGISTRATION_SUCCESS = 'REGISTRATION_SUCCESS';\r\nexport const REGISTRATION_ERROR = 'REGISTRATION_ERROR';\r\n","import React from 'react'\r\nimport classes from './Auth.css'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport { connect } from 'react-redux'\r\nimport { auth } from '../../store/actions/auth'\r\n\r\nclass Auth extends React.Component {\r\n    state = {\r\n        isFormValid: false,\r\n        formControls: {\r\n            email: {\r\n                value: '',\r\n                type: 'email',\r\n                label: 'Email',\r\n                errorMessage: 'Введте корректный email',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    email: true\r\n                }\r\n            },\r\n            password: {\r\n                value: '',\r\n                type: 'password',\r\n                label: 'Пароль',\r\n                errorMessage: 'Введте корректный пароль',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    loginHandler = () => {\r\n        this.props.auth(\r\n            this.state.formControls.email.value,\r\n            this.state.formControls.password.value,\r\n        );\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onChangeHandler = (event, controlName) => {\r\n        const { formControls } = this.state\r\n        const control = { ...formControls[controlName] }\r\n\r\n        control.value = event.target.value;\r\n\r\n        formControls[controlName] = control;\r\n\r\n        this.setState({\r\n            formControls,\r\n        })\r\n    }\r\n\r\n    renderInputs() {\r\n        return Object.keys(this.state.formControls).map((controlName, index) => {\r\n            const control = this.state.formControls[controlName];\r\n            return (\r\n                <Input\r\n                    key={controlName + index}\r\n                    type={control.type}\r\n                    value={control.value}\r\n                    valid={control.valid}\r\n                    label={control.label}\r\n                    shouldValidate={!!control.validation}\r\n                    errorMessage={control.errorMessage}\r\n                    onChange={(event) => this.onChangeHandler(event, controlName)}\r\n                />\r\n            );\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Auth}>\r\n                <div>\r\n                    <h1>Авторизация</h1>\r\n\r\n                    <form onSubmit={this.submitHandler} className={classes.AuthForm}>\r\n\r\n                        {this.renderInputs()}\r\n\r\n                        <Button\r\n                            type=\"success\"\r\n                            onClick={this.loginHandler}\r\n                        >Войти</Button>\r\n                    </form>\r\n                    {/* TODO: Вывести алерт об ошибке авторизации / об успешной авторизации */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        auth: (email, password) => dispatch(auth(email, password))\r\n    };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Auth);","import React from 'react'\r\nimport classes from './Registration.css'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport { connect } from 'react-redux'\r\n\r\nimport {registration} from '../../store/actions/registration'\r\n\r\nconst vaidateEmail = email => {\r\n    const re = /[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+/gm;\r\n    return re.test(String(email).toLocaleLowerCase());\r\n}\r\n\r\nclass Registration extends React.Component {\r\n    state = {\r\n        isFormValid: false,\r\n        formControls: {\r\n            email: {\r\n                value: '',\r\n                type: 'email',\r\n                label: 'Email',\r\n                errorMessage: 'Введте корректный email',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    email: true,\r\n                    maxLength: 100\r\n                }\r\n            },\r\n            username: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Никнейм',\r\n                errorMessage: 'Введте корректный никнейм',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    maxLength: 30,\r\n                    minLength: 3\r\n                }\r\n            },\r\n            first_name: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Имя',\r\n                errorMessage: 'Введте корректное имя',\r\n                valid: false,\r\n                validation: {\r\n                    maxLength: 50\r\n                }\r\n            },\r\n            last_name: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Фамилия',\r\n                errorMessage: 'Введте корректную фамилию',\r\n                valid: false,\r\n                validation: {\r\n                    maxLength: 50\r\n                }\r\n            },\r\n            patronymic: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Отчество',\r\n                errorMessage: 'Введте корректное отчество',\r\n                valid: false,\r\n                validation: {\r\n                    maxLength: 50\r\n                }\r\n            },\r\n            password: {\r\n                value: '',\r\n                type: 'password',\r\n                label: 'Пароль',\r\n                errorMessage: 'Введте корректный пароль',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    registerHandler = () => {\r\n        const formControls = { ...this.state.formControls }\r\n\r\n        let isFormValid = true\r\n\r\n        Object.keys(formControls).forEach(name => {\r\n            formControls[name].valid = this.validateControl(formControls[name].value, formControls[name].validation)\r\n            isFormValid = formControls[name].valid && isFormValid\r\n        });\r\n\r\n        this.setState({\r\n            isFormValid\r\n        })\r\n\r\n        const fields = {}\r\n\r\n        Object.keys(formControls).forEach(name => {\r\n            fields[name] = formControls[name].value\r\n        })\r\n        \r\n        if (isFormValid) {\r\n            this.props.registration(fields);\r\n        } else {\r\n            // TODO: Алерт об ошибки валидации\r\n        }\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onChangeHandler = (event, controlName) => {\r\n        const { formControls } = this.state\r\n        const control = { ...formControls[controlName] }\r\n\r\n        control.value = event.target.value;\r\n\r\n        formControls[controlName] = control;\r\n\r\n        this.setState({\r\n            formControls,\r\n        })\r\n    }\r\n\r\n    validateControl(value, validation) {\r\n        if (!validation) {\r\n            return true;\r\n        }\r\n        let isValid = true;\r\n\r\n        if (validation.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (validation.email) {\r\n            isValid = vaidateEmail(value) && isValid;\r\n        }\r\n\r\n        if (validation.minLength) {\r\n            isValid = value.length >= validation.minLength && isValid;\r\n        }\r\n        \r\n        if (validation.maxLength) {\r\n            isValid = value.length <= validation.maxLength && isValid;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    renderInputs() {\r\n        return Object.keys(this.state.formControls).map((controlName, index) => {\r\n            const control = this.state.formControls[controlName];\r\n            return (\r\n                <Input\r\n                    key={controlName + index}\r\n                    type={control.type}\r\n                    value={control.value}\r\n                    valid={control.valid}\r\n                    label={control.label}\r\n                    shouldValidate={!!control.validation}\r\n                    errorMessage={control.errorMessage}\r\n                    onChange={(event) => this.onChangeHandler(event, controlName)}\r\n                />\r\n            );\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Registration}>\r\n                <div>\r\n                    <h1>Регистрация</h1>\r\n                    <form onSubmit={this.submitHandler} className={classes.RegistrationForm}>\r\n\r\n                        {this.renderInputs()}\r\n\r\n                        <Button\r\n                            type=\"success\"\r\n                            onClick={this.registerHandler}\r\n                        >\r\n                            Зарегистрироватсья\r\n                        </Button>\r\n                    </form>\r\n                    {/* TODO: Вывести алерт об ошибке регистрации или о ошибке валидации полей / об успешной регистрации */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        registration: (formControls) => dispatch(registration(formControls))\r\n    };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Registration);","import axios from '../../axios/axios-stask'\r\nimport  { REGISTRATION_ERROR } from './actionTypes'\r\n\r\nexport function registration(formControls) {\r\n    return async dispatch => {\r\n        let url = \"auth/register\"\r\n\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: JSON.stringify(formControls),\r\n            url: url\r\n        };\r\n        await axios(options)\r\n            .catch(error => {\r\n                dispatch(registrationError());\r\n            })\r\n    };\r\n}\r\n\r\nexport function registrationError() {\r\n    return {\r\n        type: REGISTRATION_ERROR,\r\n        errorMessage: \"Ошибка регистрации\"\r\n    };\r\n}","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { deleteToken } from '../../store/actions/auth';\r\n\r\nclass Logout extends Component {\r\n    componentDidMount() {\r\n        this.props.deleteToken();\r\n        console.log(\"deleteToken\")\r\n    }\r\n    \r\n    render() {\r\n        return <Redirect to={'/'} />\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        deleteToken: () => dispatch(deleteToken())\r\n    };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Logout);","import React from 'react'\r\nimport './App.css'\r\nimport Layout from './hoc/Layout/Layout'\r\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport Home from './components/Home/Home'\r\nimport Auth from './components/Auth/Auth'\r\nimport { autoLogin } from './store/actions/auth'\r\nimport Registration from './components/Registration/Registration'\r\nimport Logout from './components/Logout/Logout'\r\n\r\nclass App extends React.Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.autoLogin();\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet routers = (\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route path=\"/auth\" component={Auth} />\r\n\t\t\t\t<Route path=\"/registration\" component={Registration} />\r\n\t\t\t\t<Route exact path=\"/\" component={Home} />\r\n\t\t\t\t<Redirect to={\"/\"} />\r\n\t\t\t</Switch>\r\n\t\t);\r\n\t\t\r\n\t\tif (this.props.isAuthenticated) {\r\n\t\t\trouters = (\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path=\"/logout\" component={Logout} />\r\n\t\t\t\t\t<Route exact path=\"/\"  component={Home} />\r\n\t\t\t\t\t<Redirect to={\"/\"} />\r\n\t\t\t\t</Switch>\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<Layout>\r\n\t\t\t\t{routers}\r\n\t\t\t</Layout>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tisAuthenticated: !!state.auth.token\r\n\t};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n\t\tautoLogin: () => dispatch(autoLogin())\r\n\t};\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { AUTH_SUCCESS, AUTH_LOGOUT, AUTH_ERROR } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    token: null,\r\n    errorMessage: \"\"\r\n}\r\n\r\nexport default function authReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case AUTH_SUCCESS:\r\n            return {\r\n                ...state,\r\n                token: action.token\r\n            };\r\n        case AUTH_LOGOUT:\r\n            return {\r\n                ...state,\r\n                token: null\r\n            };\r\n        case AUTH_ERROR:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport auth from './auth';\r\n\r\nexport default combineReducers({\r\n    auth,\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport { Provider }\tfrom \"react-redux\";\r\nimport rootReducer from './store/reducers/rootReducer.js';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    }) : compose;\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tcomposeEnhancers(\r\n\t\tapplyMiddleware(thunk)\r\n\t)\r\n);\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<BrowserRouter>\r\n\t\t\t<App />\r\n\t\t</BrowserRouter>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}